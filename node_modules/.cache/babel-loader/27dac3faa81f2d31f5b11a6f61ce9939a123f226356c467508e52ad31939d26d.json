{"ast":null,"code":"var _jsxFileName = \"/Users/dongwookang/Documents/internship/aes-test/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport mapboxgl from 'mapbox-gl';\nimport React, { useState, useEffect } from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport Hidden from '@material-ui/core/Hidden';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/Button';\nimport { Home } from '@material-ui/icons';\nimport LogoOverlay from './LogoOverlay';\nimport Omnibox from './Omnibox';\nimport SettingsPane from './SettingsPane';\nimport { getAllCategories } from './common';\nimport CONFIG from './config.json';\nimport { fetchMapData } from './data-loader';\nimport { THEME } from './Theme';\nimport insightLogo from './img/insight-white.png';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COMPANIES_SOURCE = 'companies';\nconst MAPS = CONFIG['maps'];\nconst POINT_LAYER = 'energy-companies-point-layer';\n\n// mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API_TOKEN;\nmapboxgl.accessToken = 'pk.eyJ1IjoidG90b3JvLWRha2UiLCJhIjoiY2tiNzJuZmQ3MDFudDJxa2N1ZG91YzBzciJ9.5qJpYzti2W7avnuM9rCiKA';\n\n/** @return {html code for the popup } */\nfunction getPopupContent(props) {\n  const categoryInfo = ['tax1', 'tax2', 'tax3'].map(k => props[k]).filter(s => s).join(\", \");\n  var extraNotes = \"\";\n  if (props.hasOwnProperty(\"notes\") && props[\"notes\"] !== \"\") {\n    extraNotes = `Focus: <span>${props['notes']}</span><br />`;\n  }\n  return `\n    <div class=\"popup\" style = \"color: 626262\">\n      <h3 class=\"company-name\">\n        <a href=${props['website']} class=\"popup-link\" target=\"blank\">${props['company']}</a>\n      </h3>\n      Sector(s): <span class=\"category-info\">${categoryInfo}</span><br />\n      City: <span class=\"city-info\">${props['city']}</span><br />\n      ${extraNotes}\n    </div>`;\n}\nfunction clearPopups() {\n  // Check if there is already a popup on the map and if so, remove it\n  // This prevents multiple popups in the case of overlapping circles\n  var popUps = document.getElementsByClassName('mapboxgl-popup');\n  if (popUps[0]) popUps[0].remove();\n}\nfunction displayPopup(map, feature) {\n  // clears the open popup and creates the new one \n  const coordinates = feature.geometry.coordinates.slice();\n  clearPopups();\n  new mapboxgl.Popup({}).setLngLat(coordinates).setHTML(getPopupContent(feature.properties)).setMaxWidth(\"600px\").addTo(map);\n}\n//79ddf2 - color for hover\n\nfunction populateMapData(map, mapId, mapData) {\n  // adds the data to the map\n  // sets correct initial view of the map\n  map.setCenter(MAPS[mapId].center);\n  map.setZoom(6);\n  mapData.then(data => {\n    map.addSource(COMPANIES_SOURCE, {\n      type: 'geojson',\n      data: data['geojson']\n    });\n\n    // Last entry is fallthrough color\n    let circleColors = data['taxonomy'].map(c => [c.name, c.color]).flat().concat(['#ccc']);\n    map.addLayer({\n      id: POINT_LAYER,\n      type: 'circle',\n      source: COMPANIES_SOURCE,\n      paint: {\n        // make circles larger as the user zooms\n        'circle-radius': {\n          stops: [[7, 5], [14, 12], [20, 50]]\n        },\n        'circle-opacity': 0.85,\n        // color circles by primary category\n        'circle-color': ['match', ['get', 'tax1']].concat(circleColors),\n        'circle-stroke-color': '#000',\n        'circle-stroke-width': 0.4\n      }\n    });\n    map.on('mouseenter', POINT_LAYER, e => {\n      map.getCanvas().style.cursor = 'pointer';\n    });\n    map.on('mouseleave', POINT_LAYER, () => {\n      map.getCanvas().style.cursor = '';\n    });\n    map.on('click', POINT_LAYER, e => displayPopup(map, e.features[0]));\n    map.flyTo({\n      center: MAPS[mapId].flyTo,\n      zoom: MAPS[mapId].flyToZoom || 8,\n      speed: 0.5\n    });\n  });\n}\nconst getUrlFragment = () => window.location.hash.replace('#', '');\nfunction useUrlFragment(fragment, callback) {\n  _s();\n  useEffect(() => {\n    window.location.hash = '#' + fragment;\n    const handleHashChange = () => {\n      callback(getUrlFragment());\n    };\n    window.addEventListener('hashchange', handleHashChange);\n    return () => {\n      window.removeEventListener('hashchange', handleHashChange);\n    };\n  });\n}\n\n/** @return {mapId} */\n_s(useUrlFragment, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nfunction getInitialMapId() {\n  let initialMapId = getUrlFragment();\n  if (MAPS.hasOwnProperty(initialMapId)) {\n    return initialMapId;\n  }\n  return CONFIG['defaultMapId'];\n}\n\n// sets the styles for the material-ui components\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row'\n  },\n  mainContent: {\n    flexGrow: 1,\n    position: 'relative'\n  },\n  mapContainer: {\n    height: '100vh',\n    top: 0,\n    right: 0,\n    left: 0,\n    bottom: 0,\n    backgroundColor: '#333'\n  },\n  mapOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    padding: 0,\n    pointerEvents: 'none'\n  },\n  mapOverlayInner: {\n    display: 'block',\n    position: 'relative',\n    height: '100%',\n    width: '100%',\n    margin: 0,\n    padding: 0\n  },\n  mainControlOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: 0,\n    margin: 0,\n    pointerEvents: 'auto',\n    display: 'flex',\n    flexDirection: 'row'\n  },\n  mainControlOverlayShifted: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: 0,\n    margin: 0,\n    pointerEvents: 'auto',\n    display: 'flex',\n    flexDirection: 'row',\n    marginLeft: 320\n  },\n  insightLogoContainer: {\n    padding: 8,\n    marginTop: 23,\n    marginLeft: 8\n  },\n  titleAndSearch: {\n    padding: '4px 8px'\n  },\n  mapTitle: {\n    color: '#fff',\n    padding: '4px 0px',\n    marginBottom: 4\n  },\n  resetViewButton: {\n    position: 'absolute',\n    bottom: 73,\n    right: 4.5,\n    minWidth: 30,\n    maxWidth: 30,\n    height: 31\n  }\n}));\n\n/** @return {html code for the app } */\nexport default function App() {\n  _s2();\n  const classes = useStyles();\n  const [thisMap, setThisMap] = useState(null);\n  const [selectedMapId, setSelectedMapId] = useState(getInitialMapId());\n  const [taxonomy, setTaxonomy] = useState([]);\n  const [companiesGeojson, setCompaniesGeojson] = useState({});\n  const [selectedCategories, setSelectedCategories] = useState(new Set([]));\n  const [mobileDrawerOpen, setMobileDrawerOpen] = useState(false);\n  function handleToggleCategory(e) {\n    // called when categories are individually changed\n    var s = new Set(selectedCategories);\n    if (s.has(e.target.name)) {\n      s.delete(e.target.name);\n    } else {\n      s.add(e.target.name);\n    }\n    setSelectedCategories(s);\n  }\n  function handleSelectAllCategories(txnomy) {\n    // takes argument instead of using taxonomy directly because taxonomy\n    // state update can lag behind\n    setSelectedCategories(getAllCategories(txnomy));\n  }\n  function handleDeselectAllCategories() {\n    setSelectedCategories(new Set());\n  }\n  function handleSelectCompany(e) {\n    // called when you select from the search bar\n    const selectedCompany = companiesGeojson.features[e.idx];\n    displayPopup(thisMap, selectedCompany);\n    thisMap.flyTo({\n      center: selectedCompany.geometry.coordinates,\n      zoom: 14\n    });\n  }\n  function handleSelectMap(mapId) {\n    // called when you change the mapId\n\n    if (mapId !== selectedMapId) {\n      console.log(selectedMapId);\n      clearPopups();\n      thisMap.removeLayer(POINT_LAYER);\n      thisMap.removeSource(COMPANIES_SOURCE);\n      setSelectedMapId(mapId);\n      setMobileDrawerOpen(false);\n      let mapData = fetchMapData(mapId);\n      mapData.then(setUpMap);\n      populateMapData(thisMap, mapId, mapData);\n      handleSelectAllCategories(taxonomy);\n    }\n  }\n  function handleShift() {\n    // called when you open the mobile drawer\n    if (!mobileDrawerOpen) {\n      return classes.mainControlOverlay;\n    } else {\n      return classes.mainControlOverlayShifted;\n    }\n  }\n  function handleReset() {\n    // called when reset button is clicked\n    thisMap.flyTo({\n      center: MAPS[selectedMapId].flyTo,\n      zoom: MAPS[selectedMapId].flyToZoom || 8\n    });\n  }\n  function setUpMap(data) {\n    // changes the data in the map\n    setTaxonomy(data['taxonomy']);\n    setCompaniesGeojson(data['geojson']);\n    // initially select all categories\n    handleSelectAllCategories(data['taxonomy']);\n  }\n\n  //added Jun 28\n  function getDistance(coord1, coord2) {\n    let x = coord1[0] - coord2[0];\n    let y = coord1[1] - coord2[1];\n    return Math.sqrt(x * x + y * y);\n  }\n\n  //added Jun 28\n  function getClosestRegion(clickedCoordinates, MAPS) {\n    let closestRegionId = null;\n    let minDistance = Infinity;\n    Object.keys(MAPS).forEach(mapId => {\n      const distance = getDistance(clickedCoordinates, MAPS[mapId].center);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestRegionId = mapId;\n      }\n    });\n    console.log(\"closest id: \");\n    console.log(closestRegionId);\n    return closestRegionId;\n  }\n\n  //added Jun 28\n  function handleMapClick(e) {\n    // Get clicked point's coordinates\n    const clickedCoordinates = [e.lngLat.lng, e.lngLat.lat];\n\n    // You need a function 'getClosestRegion' that would return the ID of the closest region to the clicked point\n    const closestRegionId = getClosestRegion(clickedCoordinates, MAPS);\n\n    // Call 'handleSelectMap' with the obtained region ID\n    handleSelectMap(closestRegionId);\n  }\n  function initMap() {\n    // creates the map\n    let map = new mapboxgl.Map({\n      container: \"map-container\",\n      style: 'mapbox://styles/mapbox/dark-v10',\n      attributionControl: false,\n      center: MAPS[selectedMapId].center,\n      zoom: MAPS[selectedMapId].flyToZoom || 6,\n      minZoom: 2\n    });\n    let mapData = fetchMapData(selectedMapId);\n    mapData.then(setUpMap);\n    map.on('load', () => {\n      map.addControl(new mapboxgl.FullscreenControl(), 'bottom-right');\n      map.addControl(new mapboxgl.NavigationControl(), 'bottom-right');\n      populateMapData(map, selectedMapId, mapData);\n    });\n    //added June 28\n    map.on('click', handleMapClick);\n    setThisMap(map);\n  }\n  useEffect(() => {\n    if (!thisMap) {\n      initMap();\n    }\n    if (thisMap) {\n      if (thisMap.getLayer(POINT_LAYER)) {\n        var filters = [\"any\"];\n        // If ANY of the 3 taxonomies for a company are selected, it should be\n        // displayed on the map.\n        [1, 2, 3].forEach(i => {\n          var filter = [\"in\", `tax${i}sanitized`];\n          selectedCategories.forEach(category => filter.push(category));\n          filters.push(filter);\n        });\n        thisMap.setFilter(POINT_LAYER, filters);\n      }\n    }\n  });\n  useUrlFragment(selectedMapId, urlFragment => {\n    if (MAPS.hasOwnProperty(urlFragment)) {\n      handleSelectMap(urlFragment);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: THEME,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(SettingsPane, {\n        selectedMapId: selectedMapId,\n        mobileDrawerOpen: mobileDrawerOpen,\n        selectedCategories: selectedCategories,\n        onToggleOpen: setMobileDrawerOpen,\n        onSelectMap: handleSelectMap,\n        taxonomy: taxonomy,\n        onSelectAllCategories: () => handleSelectAllCategories(taxonomy),\n        onDeselectAllCategories: handleDeselectAllCategories,\n        onToggleCategory: handleToggleCategory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: classes.mainContent,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"map-container\",\n          className: classes.mapContainer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(LogoOverlay, {\n          selectedMapId: selectedMapId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.resetViewButton,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            variant: \"contained\",\n            color: \"white\",\n            className: classes.resetViewButton,\n            \"aria-label\": \"reset view\",\n            onClick: () => {\n              handleReset();\n            },\n            children: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.mapOverlay,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.mapOverlayInner,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: handleShift(),\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.titleAndSearch,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: classes.mapTitle,\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"h1\",\n                    children: MAPS[selectedMapId].title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 417,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 416,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Omnibox, {\n                  companies: companiesGeojson.features,\n                  onSelectCompany: handleSelectCompany,\n                  onOpenMobileDrawer: () => setMobileDrawerOpen(true)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 419,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(LogoOverlay, {\n              selectedMapId: selectedMapId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 3\n  }, this);\n}\n_s2(App, \"SG4+6VT4+tUYjPttB6CmxbFqAzg=\", false, function () {\n  return [useStyles, useUrlFragment];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["mapboxgl","React","useState","useEffect","ThemeProvider","Hidden","Typography","makeStyles","IconButton","Home","LogoOverlay","Omnibox","SettingsPane","getAllCategories","CONFIG","fetchMapData","THEME","insightLogo","jsxDEV","_jsxDEV","COMPANIES_SOURCE","MAPS","POINT_LAYER","accessToken","getPopupContent","props","categoryInfo","map","k","filter","s","join","extraNotes","hasOwnProperty","clearPopups","popUps","document","getElementsByClassName","remove","displayPopup","feature","coordinates","geometry","slice","Popup","setLngLat","setHTML","properties","setMaxWidth","addTo","populateMapData","mapId","mapData","setCenter","center","setZoom","then","data","addSource","type","circleColors","c","name","color","flat","concat","addLayer","id","source","paint","stops","on","e","getCanvas","style","cursor","features","flyTo","zoom","flyToZoom","speed","getUrlFragment","window","location","hash","replace","useUrlFragment","fragment","callback","_s","handleHashChange","addEventListener","removeEventListener","getInitialMapId","initialMapId","useStyles","theme","root","display","flexDirection","mainContent","flexGrow","position","mapContainer","height","top","right","left","bottom","backgroundColor","mapOverlay","padding","pointerEvents","mapOverlayInner","width","margin","mainControlOverlay","mainControlOverlayShifted","marginLeft","insightLogoContainer","marginTop","titleAndSearch","mapTitle","marginBottom","resetViewButton","minWidth","maxWidth","App","_s2","classes","thisMap","setThisMap","selectedMapId","setSelectedMapId","taxonomy","setTaxonomy","companiesGeojson","setCompaniesGeojson","selectedCategories","setSelectedCategories","Set","mobileDrawerOpen","setMobileDrawerOpen","handleToggleCategory","has","target","delete","add","handleSelectAllCategories","txnomy","handleDeselectAllCategories","handleSelectCompany","selectedCompany","idx","handleSelectMap","console","log","removeLayer","removeSource","setUpMap","handleShift","handleReset","getDistance","coord1","coord2","x","y","Math","sqrt","getClosestRegion","clickedCoordinates","closestRegionId","minDistance","Infinity","Object","keys","forEach","distance","handleMapClick","lngLat","lng","lat","initMap","Map","container","attributionControl","minZoom","addControl","FullscreenControl","NavigationControl","getLayer","filters","i","category","push","setFilter","urlFragment","children","className","onToggleOpen","onSelectMap","onSelectAllCategories","onDeselectAllCategories","onToggleCategory","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","title","companies","onSelectCompany","onOpenMobileDrawer","_c","$RefreshReg$"],"sources":["/Users/dongwookang/Documents/internship/aes-test/src/App.js"],"sourcesContent":["import mapboxgl from 'mapbox-gl';\nimport React, { useState, useEffect } from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport Hidden from '@material-ui/core/Hidden';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/Button';\nimport { Home } from '@material-ui/icons';\nimport LogoOverlay from './LogoOverlay';\nimport Omnibox from './Omnibox';\nimport SettingsPane from './SettingsPane';\nimport { getAllCategories } from './common';\nimport CONFIG from './config.json';\nimport { fetchMapData } from './data-loader';\nimport { THEME } from './Theme';\nimport insightLogo from './img/insight-white.png';\nimport './App.css';\n\nconst COMPANIES_SOURCE = 'companies';\nconst MAPS = CONFIG['maps'];\nconst POINT_LAYER = 'energy-companies-point-layer';\n\n// mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API_TOKEN;\nmapboxgl.accessToken='pk.eyJ1IjoidG90b3JvLWRha2UiLCJhIjoiY2tiNzJuZmQ3MDFudDJxa2N1ZG91YzBzciJ9.5qJpYzti2W7avnuM9rCiKA'\n\n/** @return {html code for the popup } */\nfunction getPopupContent(props) {\n  const categoryInfo = ['tax1', 'tax2', 'tax3']\n    .map(k => props[k])\n    .filter(s => s).join(\", \");\n  var extraNotes = \"\";\n  if (props.hasOwnProperty(\"notes\") && props[\"notes\"] !== \"\") {\n    extraNotes = `Focus: <span>${props['notes']}</span><br />`;\n  }\n  return `\n    <div class=\"popup\" style = \"color: 626262\">\n      <h3 class=\"company-name\">\n        <a href=${props['website']} class=\"popup-link\" target=\"blank\">${props['company']}</a>\n      </h3>\n      Sector(s): <span class=\"category-info\">${categoryInfo}</span><br />\n      City: <span class=\"city-info\">${props['city']}</span><br />\n      ${extraNotes}\n    </div>`;\n}\n\nfunction clearPopups() {\n  // Check if there is already a popup on the map and if so, remove it\n  // This prevents multiple popups in the case of overlapping circles\n  var popUps = document.getElementsByClassName('mapboxgl-popup');\n  if (popUps[0]) popUps[0].remove();\n}\n\nfunction displayPopup(map, feature) {\n  // clears the open popup and creates the new one \n  const coordinates = feature.geometry.coordinates.slice();\n  clearPopups();\n  new mapboxgl.Popup({})\n    .setLngLat(coordinates)\n    .setHTML(getPopupContent(feature.properties))\n    .setMaxWidth(\"600px\")\n    .addTo(map);\n}\n//79ddf2 - color for hover\n\nfunction populateMapData(map, mapId, mapData) {\n  // adds the data to the map\n  // sets correct initial view of the map\n  map.setCenter(MAPS[mapId].center);\n  map.setZoom(6);\n\n  mapData.then(data => {\n    map.addSource(COMPANIES_SOURCE, {\n      type: 'geojson',\n      data: data['geojson'],\n    });\n\n    // Last entry is fallthrough color\n    let circleColors =\n      data['taxonomy'].map(c => [c.name, c.color]).flat().concat(['#ccc']);\n\n    map.addLayer({\n      id: POINT_LAYER,\n      type: 'circle',\n      source: COMPANIES_SOURCE,\n      paint: {\n        // make circles larger as the user zooms\n        'circle-radius': {\n          stops: [[7, 5], [14, 12], [20, 50]]\n        },\n        'circle-opacity': 0.85,\n        // color circles by primary category\n        'circle-color': ['match', ['get', 'tax1']].concat(circleColors),\n        'circle-stroke-color': '#000',\n        'circle-stroke-width': 0.4,\n      }\n    });\n\n    map.on('mouseenter', POINT_LAYER, (e) => {\n      map.getCanvas().style.cursor = 'pointer';\n    });\n\n    map.on('mouseleave', POINT_LAYER, () => {\n      map.getCanvas().style.cursor = '';\n    });\n\n    map.on('click', POINT_LAYER, e => displayPopup(map, e.features[0]));\n\n    map.flyTo({\n      center: MAPS[mapId].flyTo,\n      zoom: MAPS[mapId].flyToZoom || 8,\n      speed: 0.5,\n    });\n  });\n}\n\nconst getUrlFragment = () => window.location.hash.replace('#', '');\n\nfunction useUrlFragment(fragment, callback) {\n  useEffect(() => {\n    window.location.hash = '#' + fragment;\n    const handleHashChange = () => {\n      callback(getUrlFragment());\n    }\n    window.addEventListener('hashchange', handleHashChange);\n    return () => {\n      window.removeEventListener('hashchange', handleHashChange);\n    }\n  });\n}\n\n/** @return {mapId} */\nfunction getInitialMapId() {\n  let initialMapId = getUrlFragment();\n  if (MAPS.hasOwnProperty(initialMapId)) {\n    return initialMapId;\n  }\n  return CONFIG['defaultMapId'];\n}\n\n// sets the styles for the material-ui components\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  mainContent: {\n    flexGrow: 1,\n    position: 'relative',\n  },\n  mapContainer: {\n    height: '100vh',\n    top: 0,\n    right: 0,\n    left: 0,\n    bottom: 0,\n    backgroundColor: '#333',\n  },\n  mapOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    padding: 0,\n    pointerEvents: 'none',\n  },\n  mapOverlayInner: {\n    display: 'block',\n    position: 'relative',\n    height: '100%',\n    width: '100%',\n    margin: 0,\n    padding: 0,\n  },\n  mainControlOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: 0,\n    margin: 0,\n    pointerEvents: 'auto',\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  mainControlOverlayShifted: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: 0,\n    margin: 0,\n    pointerEvents: 'auto',\n    display: 'flex',\n    flexDirection: 'row',\n    marginLeft: 320,\n  },\n  insightLogoContainer: {\n    padding: 8,\n    marginTop: 23,\n    marginLeft: 8,\n  },\n  titleAndSearch: {\n    padding: '4px 8px',\n  },\n  mapTitle: {\n    color: '#fff',\n    padding: '4px 0px',\n    marginBottom: 4,\n  },\n  resetViewButton: {\n    position: 'absolute',\n    bottom: 73,\n    right: 4.5,\n    minWidth: 30,\n    maxWidth: 30,\n    height: 31,\n  }\n}));\n\n/** @return {html code for the app } */\nexport default function App() {\n  const classes = useStyles();\n\n  const [thisMap, setThisMap] = useState(null);\n  const [selectedMapId, setSelectedMapId] = useState(getInitialMapId());\n  const [taxonomy, setTaxonomy] = useState([]);\n  const [companiesGeojson, setCompaniesGeojson] = useState({});\n  const [selectedCategories, setSelectedCategories] = useState(new Set([]));\n  const [mobileDrawerOpen, setMobileDrawerOpen] = useState(false);\n\n\n  function handleToggleCategory(e) {\n    // called when categories are individually changed\n    var s = new Set(selectedCategories);\n    if (s.has(e.target.name)) {\n      s.delete(e.target.name);\n    } else {\n      s.add(e.target.name);\n    }\n    setSelectedCategories(s);\n  }\n\n  function handleSelectAllCategories(txnomy) {\n    // takes argument instead of using taxonomy directly because taxonomy\n    // state update can lag behind\n    setSelectedCategories(getAllCategories(txnomy));\n  }\n\n  function handleDeselectAllCategories() {\n    setSelectedCategories(new Set());\n  }\n\n  function handleSelectCompany(e) {\n    // called when you select from the search bar\n    const selectedCompany = companiesGeojson.features[e.idx];\n    displayPopup(thisMap, selectedCompany);\n    thisMap.flyTo({\n      center: selectedCompany.geometry.coordinates,\n      zoom: 14,\n    });\n  }\n\n  function handleSelectMap(mapId) {\n    // called when you change the mapId\n\n    if (mapId !== selectedMapId) {\n      console.log(selectedMapId)\n      clearPopups();\n      thisMap.removeLayer(POINT_LAYER);\n      thisMap.removeSource(COMPANIES_SOURCE);\n      setSelectedMapId(mapId);\n      setMobileDrawerOpen(false);\n      let mapData = fetchMapData(mapId);\n      mapData.then(setUpMap);\n      populateMapData(thisMap, mapId, mapData);\n      handleSelectAllCategories(taxonomy);\n    }\n  }\n\n  function handleShift() {\n    // called when you open the mobile drawer\n    if (!mobileDrawerOpen) {\n      return classes.mainControlOverlay;\n    } else {\n      return classes.mainControlOverlayShifted;\n    }\n  }\n\n  function handleReset() {\n    // called when reset button is clicked\n    thisMap.flyTo({\n      center: MAPS[selectedMapId].flyTo,\n      zoom: MAPS[selectedMapId].flyToZoom || 8,\n    });\n  }\n\n  function setUpMap(data) {\n    // changes the data in the map\n    setTaxonomy(data['taxonomy']);\n    setCompaniesGeojson(data['geojson']);\n    // initially select all categories\n    handleSelectAllCategories(data['taxonomy']);\n  }\n\n  \n   //added Jun 28\n   function getDistance(coord1, coord2) {\n    let x = coord1[0] - coord2[0]\n    let y = coord1[1] - coord2[1]\n    return Math.sqrt(x*x + y*y)\n  }\n  \n  //added Jun 28\n  function getClosestRegion(clickedCoordinates, MAPS) {\n    let closestRegionId = null;\n    let minDistance = Infinity;\n  \n    Object.keys(MAPS).forEach(mapId => {\n      const distance = getDistance(clickedCoordinates, MAPS[mapId].center);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestRegionId = mapId;\n      }\n    });\n    console.log(\"closest id: \")\n    console.log(closestRegionId)\n    return closestRegionId;\n  }\n  \n  //added Jun 28\n  function handleMapClick(e) {\n    // Get clicked point's coordinates\n    const clickedCoordinates = [e.lngLat.lng, e.lngLat.lat];\n\n    // You need a function 'getClosestRegion' that would return the ID of the closest region to the clicked point\n    const closestRegionId = getClosestRegion(clickedCoordinates, MAPS);\n    \n    // Call 'handleSelectMap' with the obtained region ID\n    handleSelectMap(closestRegionId);\n  }\n  \n  function initMap() {\n    // creates the map\n    let map = new mapboxgl.Map({\n      container: \"map-container\",\n      style: 'mapbox://styles/mapbox/dark-v10',\n      attributionControl: false,\n      center: MAPS[selectedMapId].center,\n      zoom: MAPS[selectedMapId].flyToZoom || 6,\n      minZoom: 2,\n    });\n    let mapData = fetchMapData(selectedMapId);\n    mapData.then(setUpMap);\n\n    map.on('load', () => {\n      map.addControl(new mapboxgl.FullscreenControl(), 'bottom-right');\n      map.addControl(new mapboxgl.NavigationControl(), 'bottom-right');\n      populateMapData(map, selectedMapId, mapData);\n    });\n    //added June 28\n    map.on('click', handleMapClick);\n\n    setThisMap(map);\n  }\n\n  useEffect(() => {\n    if (!thisMap) {\n      initMap();\n    }\n\n    if (thisMap) {\n      if (thisMap.getLayer(POINT_LAYER)) {\n        var filters = [\"any\"];\n        // If ANY of the 3 taxonomies for a company are selected, it should be\n        // displayed on the map.\n        [1, 2, 3].forEach(i => {\n          var filter = [\"in\", `tax${i}sanitized`];\n          selectedCategories.forEach(category => filter.push(category));\n          filters.push(filter);\n        });\n        thisMap.setFilter(POINT_LAYER, filters);\n      }\n    }\n  });\n\n  useUrlFragment(selectedMapId, urlFragment => {\n    if (MAPS.hasOwnProperty(urlFragment)) {\n      handleSelectMap(urlFragment);\n    }\n  });\n\nreturn (\n  <ThemeProvider theme={THEME}>\n    <div className={classes.root}>\n      <SettingsPane\n        selectedMapId={selectedMapId}\n        mobileDrawerOpen={mobileDrawerOpen}\n        selectedCategories={selectedCategories}\n        onToggleOpen={setMobileDrawerOpen}\n        onSelectMap={handleSelectMap}\n        taxonomy={taxonomy}\n        onSelectAllCategories={() => handleSelectAllCategories(taxonomy)}\n        onDeselectAllCategories={handleDeselectAllCategories}\n        onToggleCategory={handleToggleCategory} />\n      <main className={classes.mainContent}>\n        <div id=\"map-container\" className={classes.mapContainer} />\n          <LogoOverlay selectedMapId={selectedMapId} />\n          <div className={classes.resetViewButton} >\n            <IconButton variant=\"contained\" color=\"white\" className={classes.resetViewButton} aria-label=\"reset view\" onClick={() => { handleReset() }} >\n              <Home />\n            </IconButton>\n          </div>\n        <div className={classes.mapOverlay}>\n          <div className={classes.mapOverlayInner}>\n            <div className={handleShift()}>\n              <div className={classes.titleAndSearch}>\n                <div className={classes.mapTitle}>\n                  <Typography variant=\"h1\">{MAPS[selectedMapId].title}</Typography>\n                </div>\n                <Omnibox\n                  companies={companiesGeojson.features}\n                  onSelectCompany={handleSelectCompany}\n                  onOpenMobileDrawer={() => setMobileDrawerOpen(true)} />\n              </div>\n              \n            </div>\n            <LogoOverlay selectedMapId={selectedMapId} />\n          </div>\n        </div>\n      </main>\n    </div>\n  </ThemeProvider>\n); }\n"],"mappings":";;;AAAA,OAAOA,QAAQ,MAAM,WAAW;AAChC,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,QAAQ,0BAA0B;AACxD,OAAOC,MAAM,MAAM,0BAA0B;AAC7C,OAAOC,UAAU,MAAM,8BAA8B;AACrD,SAASC,UAAU,QAAQ,0BAA0B;AACrD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,IAAI,QAAQ,oBAAoB;AACzC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,YAAY,MAAM,gBAAgB;AACzC,SAASC,gBAAgB,QAAQ,UAAU;AAC3C,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,YAAY,QAAQ,eAAe;AAC5C,SAASC,KAAK,QAAQ,SAAS;AAC/B,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,gBAAgB,GAAG,WAAW;AACpC,MAAMC,IAAI,GAAGP,MAAM,CAAC,MAAM,CAAC;AAC3B,MAAMQ,WAAW,GAAG,8BAA8B;;AAElD;AACAtB,QAAQ,CAACuB,WAAW,GAAC,gGAAgG;;AAErH;AACA,SAASC,eAAeA,CAACC,KAAK,EAAE;EAC9B,MAAMC,YAAY,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAC1CC,GAAG,CAACC,CAAC,IAAIH,KAAK,CAACG,CAAC,CAAC,CAAC,CAClBC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EAC5B,IAAIC,UAAU,GAAG,EAAE;EACnB,IAAIP,KAAK,CAACQ,cAAc,CAAC,OAAO,CAAC,IAAIR,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE;IAC1DO,UAAU,GAAI,gBAAeP,KAAK,CAAC,OAAO,CAAE,eAAc;EAC5D;EACA,OAAQ;AACV;AACA;AACA,kBAAkBA,KAAK,CAAC,SAAS,CAAE,sCAAqCA,KAAK,CAAC,SAAS,CAAE;AACzF;AACA,+CAA+CC,YAAa;AAC5D,sCAAsCD,KAAK,CAAC,MAAM,CAAE;AACpD,QAAQO,UAAW;AACnB,WAAW;AACX;AAEA,SAASE,WAAWA,CAAA,EAAG;EACrB;EACA;EACA,IAAIC,MAAM,GAAGC,QAAQ,CAACC,sBAAsB,CAAC,gBAAgB,CAAC;EAC9D,IAAIF,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAACG,MAAM,CAAC,CAAC;AACnC;AAEA,SAASC,YAAYA,CAACZ,GAAG,EAAEa,OAAO,EAAE;EAClC;EACA,MAAMC,WAAW,GAAGD,OAAO,CAACE,QAAQ,CAACD,WAAW,CAACE,KAAK,CAAC,CAAC;EACxDT,WAAW,CAAC,CAAC;EACb,IAAIlC,QAAQ,CAAC4C,KAAK,CAAC,CAAC,CAAC,CAAC,CACnBC,SAAS,CAACJ,WAAW,CAAC,CACtBK,OAAO,CAACtB,eAAe,CAACgB,OAAO,CAACO,UAAU,CAAC,CAAC,CAC5CC,WAAW,CAAC,OAAO,CAAC,CACpBC,KAAK,CAACtB,GAAG,CAAC;AACf;AACA;;AAEA,SAASuB,eAAeA,CAACvB,GAAG,EAAEwB,KAAK,EAAEC,OAAO,EAAE;EAC5C;EACA;EACAzB,GAAG,CAAC0B,SAAS,CAAChC,IAAI,CAAC8B,KAAK,CAAC,CAACG,MAAM,CAAC;EACjC3B,GAAG,CAAC4B,OAAO,CAAC,CAAC,CAAC;EAEdH,OAAO,CAACI,IAAI,CAACC,IAAI,IAAI;IACnB9B,GAAG,CAAC+B,SAAS,CAACtC,gBAAgB,EAAE;MAC9BuC,IAAI,EAAE,SAAS;MACfF,IAAI,EAAEA,IAAI,CAAC,SAAS;IACtB,CAAC,CAAC;;IAEF;IACA,IAAIG,YAAY,GACdH,IAAI,CAAC,UAAU,CAAC,CAAC9B,GAAG,CAACkC,CAAC,IAAI,CAACA,CAAC,CAACC,IAAI,EAAED,CAAC,CAACE,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC;IAEtEtC,GAAG,CAACuC,QAAQ,CAAC;MACXC,EAAE,EAAE7C,WAAW;MACfqC,IAAI,EAAE,QAAQ;MACdS,MAAM,EAAEhD,gBAAgB;MACxBiD,KAAK,EAAE;QACL;QACA,eAAe,EAAE;UACfC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QACpC,CAAC;QACD,gBAAgB,EAAE,IAAI;QACtB;QACA,cAAc,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAACL,MAAM,CAACL,YAAY,CAAC;QAC/D,qBAAqB,EAAE,MAAM;QAC7B,qBAAqB,EAAE;MACzB;IACF,CAAC,CAAC;IAEFjC,GAAG,CAAC4C,EAAE,CAAC,YAAY,EAAEjD,WAAW,EAAGkD,CAAC,IAAK;MACvC7C,GAAG,CAAC8C,SAAS,CAAC,CAAC,CAACC,KAAK,CAACC,MAAM,GAAG,SAAS;IAC1C,CAAC,CAAC;IAEFhD,GAAG,CAAC4C,EAAE,CAAC,YAAY,EAAEjD,WAAW,EAAE,MAAM;MACtCK,GAAG,CAAC8C,SAAS,CAAC,CAAC,CAACC,KAAK,CAACC,MAAM,GAAG,EAAE;IACnC,CAAC,CAAC;IAEFhD,GAAG,CAAC4C,EAAE,CAAC,OAAO,EAAEjD,WAAW,EAAEkD,CAAC,IAAIjC,YAAY,CAACZ,GAAG,EAAE6C,CAAC,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAEnEjD,GAAG,CAACkD,KAAK,CAAC;MACRvB,MAAM,EAAEjC,IAAI,CAAC8B,KAAK,CAAC,CAAC0B,KAAK;MACzBC,IAAI,EAAEzD,IAAI,CAAC8B,KAAK,CAAC,CAAC4B,SAAS,IAAI,CAAC;MAChCC,KAAK,EAAE;IACT,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,MAAMC,cAAc,GAAGA,CAAA,KAAMC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;AAElE,SAASC,cAAcA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAAAC,EAAA;EAC1CtF,SAAS,CAAC,MAAM;IACd+E,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG,GAAGG,QAAQ;IACrC,MAAMG,gBAAgB,GAAGA,CAAA,KAAM;MAC7BF,QAAQ,CAACP,cAAc,CAAC,CAAC,CAAC;IAC5B,CAAC;IACDC,MAAM,CAACS,gBAAgB,CAAC,YAAY,EAAED,gBAAgB,CAAC;IACvD,OAAO,MAAM;MACXR,MAAM,CAACU,mBAAmB,CAAC,YAAY,EAAEF,gBAAgB,CAAC;IAC5D,CAAC;EACH,CAAC,CAAC;AACJ;;AAEA;AAAAD,EAAA,CAbSH,cAAc;AAcvB,SAASO,eAAeA,CAAA,EAAG;EACzB,IAAIC,YAAY,GAAGb,cAAc,CAAC,CAAC;EACnC,IAAI5D,IAAI,CAACY,cAAc,CAAC6D,YAAY,CAAC,EAAE;IACrC,OAAOA,YAAY;EACrB;EACA,OAAOhF,MAAM,CAAC,cAAc,CAAC;AAC/B;;AAEA;AACA,MAAMiF,SAAS,GAAGxF,UAAU,CAAEyF,KAAK,KAAM;EACvCC,IAAI,EAAE;IACJC,OAAO,EAAE,MAAM;IACfC,aAAa,EAAE;EACjB,CAAC;EACDC,WAAW,EAAE;IACXC,QAAQ,EAAE,CAAC;IACXC,QAAQ,EAAE;EACZ,CAAC;EACDC,YAAY,EAAE;IACZC,MAAM,EAAE,OAAO;IACfC,GAAG,EAAE,CAAC;IACNC,KAAK,EAAE,CAAC;IACRC,IAAI,EAAE,CAAC;IACPC,MAAM,EAAE,CAAC;IACTC,eAAe,EAAE;EACnB,CAAC;EACDC,UAAU,EAAE;IACVR,QAAQ,EAAE,UAAU;IACpBG,GAAG,EAAE,CAAC;IACNE,IAAI,EAAE,CAAC;IACPD,KAAK,EAAE,CAAC;IACRE,MAAM,EAAE,CAAC;IACTG,OAAO,EAAE,CAAC;IACVC,aAAa,EAAE;EACjB,CAAC;EACDC,eAAe,EAAE;IACff,OAAO,EAAE,OAAO;IAChBI,QAAQ,EAAE,UAAU;IACpBE,MAAM,EAAE,MAAM;IACdU,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE,CAAC;IACTJ,OAAO,EAAE;EACX,CAAC;EACDK,kBAAkB,EAAE;IAClBd,QAAQ,EAAE,UAAU;IACpBG,GAAG,EAAE,CAAC;IACNE,IAAI,EAAE,CAAC;IACPI,OAAO,EAAE,CAAC;IACVI,MAAM,EAAE,CAAC;IACTH,aAAa,EAAE,MAAM;IACrBd,OAAO,EAAE,MAAM;IACfC,aAAa,EAAE;EACjB,CAAC;EACDkB,yBAAyB,EAAE;IACzBf,QAAQ,EAAE,UAAU;IACpBG,GAAG,EAAE,CAAC;IACNE,IAAI,EAAE,CAAC;IACPI,OAAO,EAAE,CAAC;IACVI,MAAM,EAAE,CAAC;IACTH,aAAa,EAAE,MAAM;IACrBd,OAAO,EAAE,MAAM;IACfC,aAAa,EAAE,KAAK;IACpBmB,UAAU,EAAE;EACd,CAAC;EACDC,oBAAoB,EAAE;IACpBR,OAAO,EAAE,CAAC;IACVS,SAAS,EAAE,EAAE;IACbF,UAAU,EAAE;EACd,CAAC;EACDG,cAAc,EAAE;IACdV,OAAO,EAAE;EACX,CAAC;EACDW,QAAQ,EAAE;IACR3D,KAAK,EAAE,MAAM;IACbgD,OAAO,EAAE,SAAS;IAClBY,YAAY,EAAE;EAChB,CAAC;EACDC,eAAe,EAAE;IACftB,QAAQ,EAAE,UAAU;IACpBM,MAAM,EAAE,EAAE;IACVF,KAAK,EAAE,GAAG;IACVmB,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE,EAAE;IACZtB,MAAM,EAAE;EACV;AACF,CAAC,CAAC,CAAC;;AAEH;AACA,eAAe,SAASuB,GAAGA,CAAA,EAAG;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAGlC,SAAS,CAAC,CAAC;EAE3B,MAAM,CAACmC,OAAO,EAAEC,UAAU,CAAC,GAAGjI,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACkI,aAAa,EAAEC,gBAAgB,CAAC,GAAGnI,QAAQ,CAAC2F,eAAe,CAAC,CAAC,CAAC;EACrE,MAAM,CAACyC,QAAQ,EAAEC,WAAW,CAAC,GAAGrI,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACsI,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGvI,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACwI,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGzI,QAAQ,CAAC,IAAI0I,GAAG,CAAC,EAAE,CAAC,CAAC;EACzE,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG5I,QAAQ,CAAC,KAAK,CAAC;EAG/D,SAAS6I,oBAAoBA,CAACvE,CAAC,EAAE;IAC/B;IACA,IAAI1C,CAAC,GAAG,IAAI8G,GAAG,CAACF,kBAAkB,CAAC;IACnC,IAAI5G,CAAC,CAACkH,GAAG,CAACxE,CAAC,CAACyE,MAAM,CAACnF,IAAI,CAAC,EAAE;MACxBhC,CAAC,CAACoH,MAAM,CAAC1E,CAAC,CAACyE,MAAM,CAACnF,IAAI,CAAC;IACzB,CAAC,MAAM;MACLhC,CAAC,CAACqH,GAAG,CAAC3E,CAAC,CAACyE,MAAM,CAACnF,IAAI,CAAC;IACtB;IACA6E,qBAAqB,CAAC7G,CAAC,CAAC;EAC1B;EAEA,SAASsH,yBAAyBA,CAACC,MAAM,EAAE;IACzC;IACA;IACAV,qBAAqB,CAAC9H,gBAAgB,CAACwI,MAAM,CAAC,CAAC;EACjD;EAEA,SAASC,2BAA2BA,CAAA,EAAG;IACrCX,qBAAqB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;EAClC;EAEA,SAASW,mBAAmBA,CAAC/E,CAAC,EAAE;IAC9B;IACA,MAAMgF,eAAe,GAAGhB,gBAAgB,CAAC5D,QAAQ,CAACJ,CAAC,CAACiF,GAAG,CAAC;IACxDlH,YAAY,CAAC2F,OAAO,EAAEsB,eAAe,CAAC;IACtCtB,OAAO,CAACrD,KAAK,CAAC;MACZvB,MAAM,EAAEkG,eAAe,CAAC9G,QAAQ,CAACD,WAAW;MAC5CqC,IAAI,EAAE;IACR,CAAC,CAAC;EACJ;EAEA,SAAS4E,eAAeA,CAACvG,KAAK,EAAE;IAC9B;;IAEA,IAAIA,KAAK,KAAKiF,aAAa,EAAE;MAC3BuB,OAAO,CAACC,GAAG,CAACxB,aAAa,CAAC;MAC1BlG,WAAW,CAAC,CAAC;MACbgG,OAAO,CAAC2B,WAAW,CAACvI,WAAW,CAAC;MAChC4G,OAAO,CAAC4B,YAAY,CAAC1I,gBAAgB,CAAC;MACtCiH,gBAAgB,CAAClF,KAAK,CAAC;MACvB2F,mBAAmB,CAAC,KAAK,CAAC;MAC1B,IAAI1F,OAAO,GAAGrC,YAAY,CAACoC,KAAK,CAAC;MACjCC,OAAO,CAACI,IAAI,CAACuG,QAAQ,CAAC;MACtB7G,eAAe,CAACgF,OAAO,EAAE/E,KAAK,EAAEC,OAAO,CAAC;MACxCgG,yBAAyB,CAACd,QAAQ,CAAC;IACrC;EACF;EAEA,SAAS0B,WAAWA,CAAA,EAAG;IACrB;IACA,IAAI,CAACnB,gBAAgB,EAAE;MACrB,OAAOZ,OAAO,CAACb,kBAAkB;IACnC,CAAC,MAAM;MACL,OAAOa,OAAO,CAACZ,yBAAyB;IAC1C;EACF;EAEA,SAAS4C,WAAWA,CAAA,EAAG;IACrB;IACA/B,OAAO,CAACrD,KAAK,CAAC;MACZvB,MAAM,EAAEjC,IAAI,CAAC+G,aAAa,CAAC,CAACvD,KAAK;MACjCC,IAAI,EAAEzD,IAAI,CAAC+G,aAAa,CAAC,CAACrD,SAAS,IAAI;IACzC,CAAC,CAAC;EACJ;EAEA,SAASgF,QAAQA,CAACtG,IAAI,EAAE;IACtB;IACA8E,WAAW,CAAC9E,IAAI,CAAC,UAAU,CAAC,CAAC;IAC7BgF,mBAAmB,CAAChF,IAAI,CAAC,SAAS,CAAC,CAAC;IACpC;IACA2F,yBAAyB,CAAC3F,IAAI,CAAC,UAAU,CAAC,CAAC;EAC7C;;EAGC;EACA,SAASyG,WAAWA,CAACC,MAAM,EAAEC,MAAM,EAAE;IACpC,IAAIC,CAAC,GAAGF,MAAM,CAAC,CAAC,CAAC,GAAGC,MAAM,CAAC,CAAC,CAAC;IAC7B,IAAIE,CAAC,GAAGH,MAAM,CAAC,CAAC,CAAC,GAAGC,MAAM,CAAC,CAAC,CAAC;IAC7B,OAAOG,IAAI,CAACC,IAAI,CAACH,CAAC,GAACA,CAAC,GAAGC,CAAC,GAACA,CAAC,CAAC;EAC7B;;EAEA;EACA,SAASG,gBAAgBA,CAACC,kBAAkB,EAAErJ,IAAI,EAAE;IAClD,IAAIsJ,eAAe,GAAG,IAAI;IAC1B,IAAIC,WAAW,GAAGC,QAAQ;IAE1BC,MAAM,CAACC,IAAI,CAAC1J,IAAI,CAAC,CAAC2J,OAAO,CAAC7H,KAAK,IAAI;MACjC,MAAM8H,QAAQ,GAAGf,WAAW,CAACQ,kBAAkB,EAAErJ,IAAI,CAAC8B,KAAK,CAAC,CAACG,MAAM,CAAC;MACpE,IAAI2H,QAAQ,GAAGL,WAAW,EAAE;QAC1BA,WAAW,GAAGK,QAAQ;QACtBN,eAAe,GAAGxH,KAAK;MACzB;IACF,CAAC,CAAC;IACFwG,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3BD,OAAO,CAACC,GAAG,CAACe,eAAe,CAAC;IAC5B,OAAOA,eAAe;EACxB;;EAEA;EACA,SAASO,cAAcA,CAAC1G,CAAC,EAAE;IACzB;IACA,MAAMkG,kBAAkB,GAAG,CAAClG,CAAC,CAAC2G,MAAM,CAACC,GAAG,EAAE5G,CAAC,CAAC2G,MAAM,CAACE,GAAG,CAAC;;IAEvD;IACA,MAAMV,eAAe,GAAGF,gBAAgB,CAACC,kBAAkB,EAAErJ,IAAI,CAAC;;IAElE;IACAqI,eAAe,CAACiB,eAAe,CAAC;EAClC;EAEA,SAASW,OAAOA,CAAA,EAAG;IACjB;IACA,IAAI3J,GAAG,GAAG,IAAI3B,QAAQ,CAACuL,GAAG,CAAC;MACzBC,SAAS,EAAE,eAAe;MAC1B9G,KAAK,EAAE,iCAAiC;MACxC+G,kBAAkB,EAAE,KAAK;MACzBnI,MAAM,EAAEjC,IAAI,CAAC+G,aAAa,CAAC,CAAC9E,MAAM;MAClCwB,IAAI,EAAEzD,IAAI,CAAC+G,aAAa,CAAC,CAACrD,SAAS,IAAI,CAAC;MACxC2G,OAAO,EAAE;IACX,CAAC,CAAC;IACF,IAAItI,OAAO,GAAGrC,YAAY,CAACqH,aAAa,CAAC;IACzChF,OAAO,CAACI,IAAI,CAACuG,QAAQ,CAAC;IAEtBpI,GAAG,CAAC4C,EAAE,CAAC,MAAM,EAAE,MAAM;MACnB5C,GAAG,CAACgK,UAAU,CAAC,IAAI3L,QAAQ,CAAC4L,iBAAiB,CAAC,CAAC,EAAE,cAAc,CAAC;MAChEjK,GAAG,CAACgK,UAAU,CAAC,IAAI3L,QAAQ,CAAC6L,iBAAiB,CAAC,CAAC,EAAE,cAAc,CAAC;MAChE3I,eAAe,CAACvB,GAAG,EAAEyG,aAAa,EAAEhF,OAAO,CAAC;IAC9C,CAAC,CAAC;IACF;IACAzB,GAAG,CAAC4C,EAAE,CAAC,OAAO,EAAE2G,cAAc,CAAC;IAE/B/C,UAAU,CAACxG,GAAG,CAAC;EACjB;EAEAxB,SAAS,CAAC,MAAM;IACd,IAAI,CAAC+H,OAAO,EAAE;MACZoD,OAAO,CAAC,CAAC;IACX;IAEA,IAAIpD,OAAO,EAAE;MACX,IAAIA,OAAO,CAAC4D,QAAQ,CAACxK,WAAW,CAAC,EAAE;QACjC,IAAIyK,OAAO,GAAG,CAAC,KAAK,CAAC;QACrB;QACA;QACA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACf,OAAO,CAACgB,CAAC,IAAI;UACrB,IAAInK,MAAM,GAAG,CAAC,IAAI,EAAG,MAAKmK,CAAE,WAAU,CAAC;UACvCtD,kBAAkB,CAACsC,OAAO,CAACiB,QAAQ,IAAIpK,MAAM,CAACqK,IAAI,CAACD,QAAQ,CAAC,CAAC;UAC7DF,OAAO,CAACG,IAAI,CAACrK,MAAM,CAAC;QACtB,CAAC,CAAC;QACFqG,OAAO,CAACiE,SAAS,CAAC7K,WAAW,EAAEyK,OAAO,CAAC;MACzC;IACF;EACF,CAAC,CAAC;EAEFzG,cAAc,CAAC8C,aAAa,EAAEgE,WAAW,IAAI;IAC3C,IAAI/K,IAAI,CAACY,cAAc,CAACmK,WAAW,CAAC,EAAE;MACpC1C,eAAe,CAAC0C,WAAW,CAAC;IAC9B;EACF,CAAC,CAAC;EAEJ,oBACEjL,OAAA,CAACf,aAAa;IAAC4F,KAAK,EAAEhF,KAAM;IAAAqL,QAAA,eAC1BlL,OAAA;MAAKmL,SAAS,EAAErE,OAAO,CAAChC,IAAK;MAAAoG,QAAA,gBAC3BlL,OAAA,CAACP,YAAY;QACXwH,aAAa,EAAEA,aAAc;QAC7BS,gBAAgB,EAAEA,gBAAiB;QACnCH,kBAAkB,EAAEA,kBAAmB;QACvC6D,YAAY,EAAEzD,mBAAoB;QAClC0D,WAAW,EAAE9C,eAAgB;QAC7BpB,QAAQ,EAAEA,QAAS;QACnBmE,qBAAqB,EAAEA,CAAA,KAAMrD,yBAAyB,CAACd,QAAQ,CAAE;QACjEoE,uBAAuB,EAAEpD,2BAA4B;QACrDqD,gBAAgB,EAAE5D;MAAqB;QAAA6D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC5C5L,OAAA;QAAMmL,SAAS,EAAErE,OAAO,CAAC7B,WAAY;QAAAiG,QAAA,gBACnClL,OAAA;UAAKgD,EAAE,EAAC,eAAe;UAACmI,SAAS,EAAErE,OAAO,CAAC1B;QAAa;UAAAqG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACzD5L,OAAA,CAACT,WAAW;UAAC0H,aAAa,EAAEA;QAAc;UAAAwE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC7C5L,OAAA;UAAKmL,SAAS,EAAErE,OAAO,CAACL,eAAgB;UAAAyE,QAAA,eACtClL,OAAA,CAACX,UAAU;YAACwM,OAAO,EAAC,WAAW;YAACjJ,KAAK,EAAC,OAAO;YAACuI,SAAS,EAAErE,OAAO,CAACL,eAAgB;YAAC,cAAW,YAAY;YAACqF,OAAO,EAAEA,CAAA,KAAM;cAAEhD,WAAW,CAAC,CAAC;YAAC,CAAE;YAAAoC,QAAA,eACzIlL,OAAA,CAACV,IAAI;cAAAmM,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV,CAAC,eACR5L,OAAA;UAAKmL,SAAS,EAAErE,OAAO,CAACnB,UAAW;UAAAuF,QAAA,eACjClL,OAAA;YAAKmL,SAAS,EAAErE,OAAO,CAAChB,eAAgB;YAAAoF,QAAA,gBACtClL,OAAA;cAAKmL,SAAS,EAAEtC,WAAW,CAAC,CAAE;cAAAqC,QAAA,eAC5BlL,OAAA;gBAAKmL,SAAS,EAAErE,OAAO,CAACR,cAAe;gBAAA4E,QAAA,gBACrClL,OAAA;kBAAKmL,SAAS,EAAErE,OAAO,CAACP,QAAS;kBAAA2E,QAAA,eAC/BlL,OAAA,CAACb,UAAU;oBAAC0M,OAAO,EAAC,IAAI;oBAAAX,QAAA,EAAEhL,IAAI,CAAC+G,aAAa,CAAC,CAAC8E;kBAAK;oBAAAN,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAa;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC9D,CAAC,eACN5L,OAAA,CAACR,OAAO;kBACNwM,SAAS,EAAE3E,gBAAgB,CAAC5D,QAAS;kBACrCwI,eAAe,EAAE7D,mBAAoB;kBACrC8D,kBAAkB,EAAEA,CAAA,KAAMvE,mBAAmB,CAAC,IAAI;gBAAE;kBAAA8D,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACtD;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEH,CAAC,eACN5L,OAAA,CAACT,WAAW;cAAC0H,aAAa,EAAEA;YAAc;cAAAwE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1C;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AACf;AAAC/E,GAAA,CApNoBD,GAAG;EAAA,QACThC,SAAS,EAoKzBT,cAAc;AAAA;AAAAgI,EAAA,GArKQvF,GAAG;AAAA,IAAAuF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}