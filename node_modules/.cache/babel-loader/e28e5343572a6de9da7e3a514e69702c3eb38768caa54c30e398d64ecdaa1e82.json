{"ast":null,"code":"import{normalizeCategory}from'./common';/** @return {...} */function/** gets a certain category */getCategory(k,taxonomy){if(k===-1){return'';}return taxonomy[k]['name'];}/** @return {...} */function/** shapes data for json file */toFinalForm(data){var headers=data.table.columns;var colidx={};for(var i=0;i<headers.length;i++){colidx[headers[i]]=i;}var features=[];data.table.data.forEach(function(row,i){var feature={'type':'Feature','properties':{'idx':i,'company':row[colidx['company']],'city':data.cities[row[colidx['city']]],'tax1':getCategory(row[colidx['tax1']],data.taxonomy),'tax2':getCategory(row[colidx['tax2']],data.taxonomy),'tax3':getCategory(row[colidx['tax3']],data.taxonomy),'website':row[colidx['website']],'notes':row[colidx['notes']]},'geometry':{'type':'Point','coordinates':[row[colidx['lng']],row[colidx['lat']]]}};// canonicalize categories for use as labels\n['tax1','tax2','tax3'].forEach(function(label){var newprop=\"\".concat(label,\"sanitized\");var category=feature.properties[label];feature.properties[newprop]=normalizeCategory(category);});features.push(feature);});return{geojson:{type:'FeatureCollection',features:features},taxonomy:data.taxonomy};}/** @return {...} */export function/** fetches url and shapes to Final form */fetchMapData(mapId){var url=process.env.PUBLIC_URL+\"/data/\".concat(mapId,\".json\");return fetch(url).then(function(r){return r.json();}).then(toFinalForm);}","map":{"version":3,"names":["normalizeCategory","getCategory","k","taxonomy","toFinalForm","data","headers","table","columns","colidx","i","length","features","forEach","row","feature","cities","label","newprop","concat","category","properties","push","geojson","type","fetchMapData","mapId","url","process","env","PUBLIC_URL","fetch","then","r","json"],"sources":["/Users/dongwookang/Documents/internship/aes-test/src/data-loader.js"],"sourcesContent":["import { normalizeCategory } from './common';\n\n/** @return {...} */\nfunction /** gets a certain category */ getCategory(k, taxonomy) {\n  if (k === -1) {\n    return '';\n  }\n  return taxonomy[k]['name'];\n}\n\n/** @return {...} */\nfunction /** shapes data for json file */ toFinalForm(data) {\n  let headers = data.table.columns;\n  const colidx = {};\n  for (var i = 0; i < headers.length; i++) {\n    colidx[headers[i]] = i;\n  }\n  const features = [];\n  data.table.data.forEach((row, i) => {\n    let feature = {\n      'type': 'Feature',\n      'properties': {\n        'idx': i,\n        'company': row[colidx['company']],\n        'city': data.cities[row[colidx['city']]],\n        'tax1': getCategory(row[colidx['tax1']], data.taxonomy),\n        'tax2': getCategory(row[colidx['tax2']], data.taxonomy),\n        'tax3': getCategory(row[colidx['tax3']], data.taxonomy),\n        'website': row[colidx['website']],\n        'notes': row[colidx['notes']],\n      },\n      'geometry': {\n        'type': 'Point',\n        'coordinates': [row[colidx['lng']], row[colidx['lat']]],\n      },\n    };\n    // canonicalize categories for use as labels\n    ['tax1', 'tax2', 'tax3'].forEach(label => {\n      const newprop = `${label}sanitized`;\n      let category = feature.properties[label];\n      feature.properties[newprop] = normalizeCategory(category);\n    });\n    features.push(feature);\n  });\n  return {\n    geojson: {\n      type: 'FeatureCollection',\n      features: features,\n    },\n    taxonomy: data.taxonomy,\n  }\n}\n\n/** @return {...} */\nexport function /** fetches url and shapes to Final form */ fetchMapData(mapId) {\n  let url = process.env.PUBLIC_URL + `/data/${mapId}.json`;\n  return fetch(url).then(r => r.json()).then(toFinalForm);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}