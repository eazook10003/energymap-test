{"ast":null,"code":"import { normalizeCategory } from './common';\n\n/** @return {...} */\nfunction /** gets a certain category */getCategory(k, taxonomy) {\n  if (k === -1) {\n    return '';\n  }\n  return taxonomy[k]['name'];\n}\n\n/** @return {...} */\nfunction /** shapes data for json file */toFinalForm(data) {\n  let headers = data.table.columns;\n  const colidx = {};\n  for (var i = 0; i < headers.length; i++) {\n    colidx[headers[i]] = i;\n  }\n  const features = [];\n  data.table.data.forEach((row, i) => {\n    let feature = {\n      'type': 'Feature',\n      'properties': {\n        'idx': i,\n        'company': row[colidx['company']],\n        'city': data.cities[row[colidx['city']]],\n        'tax1': getCategory(row[colidx['tax1']], data.taxonomy),\n        'tax2': getCategory(row[colidx['tax2']], data.taxonomy),\n        'tax3': getCategory(row[colidx['tax3']], data.taxonomy),\n        'website': row[colidx['website']],\n        'notes': row[colidx['notes']]\n      },\n      'geometry': {\n        'type': 'Point',\n        'coordinates': [row[colidx['lng']], row[colidx['lat']]]\n      }\n    };\n    // canonicalize categories for use as labels\n    ['tax1', 'tax2', 'tax3'].forEach(label => {\n      const newprop = `${label}sanitized`;\n      let category = feature.properties[label];\n      feature.properties[newprop] = normalizeCategory(category);\n    });\n    features.push(feature);\n  });\n  return {\n    geojson: {\n      type: 'FeatureCollection',\n      features: features\n    },\n    taxonomy: data.taxonomy\n  };\n}\n\n/** @return {...} */\nexport function fetchMapData(mapId) {\n  return new Promise((resolve, reject) => {\n    let url = process.env.PUBLIC_URL + `/data/${mapId}.json`;\n    fetch(url).then(r => r.json()).then(toFinalForm).then(finalData => resolve(finalData)).catch(error => reject(error));\n  });\n}","map":{"version":3,"names":["normalizeCategory","getCategory","k","taxonomy","toFinalForm","data","headers","table","columns","colidx","i","length","features","forEach","row","feature","cities","label","newprop","category","properties","push","geojson","type","fetchMapData","mapId","Promise","resolve","reject","url","process","env","PUBLIC_URL","fetch","then","r","json","finalData","catch","error"],"sources":["/Users/dongwookang/Documents/internship/aes-test/src/data-loader.js"],"sourcesContent":["import { normalizeCategory } from './common';\n\n/** @return {...} */\nfunction /** gets a certain category */ getCategory(k, taxonomy) {\n  if (k === -1) {\n    return '';\n  }\n  return taxonomy[k]['name'];\n}\n\n/** @return {...} */\nfunction /** shapes data for json file */ toFinalForm(data) {\n  let headers = data.table.columns;\n  const colidx = {};\n  for (var i = 0; i < headers.length; i++) {\n    colidx[headers[i]] = i;\n  }\n  const features = [];\n  data.table.data.forEach((row, i) => {\n    let feature = {\n      'type': 'Feature',\n      'properties': {\n        'idx': i,\n        'company': row[colidx['company']],\n        'city': data.cities[row[colidx['city']]],\n        'tax1': getCategory(row[colidx['tax1']], data.taxonomy),\n        'tax2': getCategory(row[colidx['tax2']], data.taxonomy),\n        'tax3': getCategory(row[colidx['tax3']], data.taxonomy),\n        'website': row[colidx['website']],\n        'notes': row[colidx['notes']],\n      },\n      'geometry': {\n        'type': 'Point',\n        'coordinates': [row[colidx['lng']], row[colidx['lat']]],\n      },\n    };\n    // canonicalize categories for use as labels\n    ['tax1', 'tax2', 'tax3'].forEach(label => {\n      const newprop = `${label}sanitized`;\n      let category = feature.properties[label];\n      feature.properties[newprop] = normalizeCategory(category);\n    });\n    features.push(feature);\n  });\n  return {\n    geojson: {\n      type: 'FeatureCollection',\n      features: features,\n    },\n    taxonomy: data.taxonomy,\n  }\n}\n\n/** @return {...} */\nexport function fetchMapData(mapId) {\n  return new Promise((resolve, reject) => {\n    let url = process.env.PUBLIC_URL + `/data/${mapId}.json`;\n\n    fetch(url)\n      .then(r => r.json())\n      .then(toFinalForm)\n      .then(finalData => resolve(finalData))\n      .catch(error => reject(error));\n  });\n}\n\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,UAAU;;AAE5C;AACA,SAAS,8BAA+BC,WAAWA,CAACC,CAAC,EAAEC,QAAQ,EAAE;EAC/D,IAAID,CAAC,KAAK,CAAC,CAAC,EAAE;IACZ,OAAO,EAAE;EACX;EACA,OAAOC,QAAQ,CAACD,CAAC,CAAC,CAAC,MAAM,CAAC;AAC5B;;AAEA;AACA,SAAS,gCAAiCE,WAAWA,CAACC,IAAI,EAAE;EAC1D,IAAIC,OAAO,GAAGD,IAAI,CAACE,KAAK,CAACC,OAAO;EAChC,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACvCD,MAAM,CAACH,OAAO,CAACI,CAAC,CAAC,CAAC,GAAGA,CAAC;EACxB;EACA,MAAME,QAAQ,GAAG,EAAE;EACnBP,IAAI,CAACE,KAAK,CAACF,IAAI,CAACQ,OAAO,CAAC,CAACC,GAAG,EAAEJ,CAAC,KAAK;IAClC,IAAIK,OAAO,GAAG;MACZ,MAAM,EAAE,SAAS;MACjB,YAAY,EAAE;QACZ,KAAK,EAAEL,CAAC;QACR,SAAS,EAAEI,GAAG,CAACL,MAAM,CAAC,SAAS,CAAC,CAAC;QACjC,MAAM,EAAEJ,IAAI,CAACW,MAAM,CAACF,GAAG,CAACL,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QACxC,MAAM,EAAER,WAAW,CAACa,GAAG,CAACL,MAAM,CAAC,MAAM,CAAC,CAAC,EAAEJ,IAAI,CAACF,QAAQ,CAAC;QACvD,MAAM,EAAEF,WAAW,CAACa,GAAG,CAACL,MAAM,CAAC,MAAM,CAAC,CAAC,EAAEJ,IAAI,CAACF,QAAQ,CAAC;QACvD,MAAM,EAAEF,WAAW,CAACa,GAAG,CAACL,MAAM,CAAC,MAAM,CAAC,CAAC,EAAEJ,IAAI,CAACF,QAAQ,CAAC;QACvD,SAAS,EAAEW,GAAG,CAACL,MAAM,CAAC,SAAS,CAAC,CAAC;QACjC,OAAO,EAAEK,GAAG,CAACL,MAAM,CAAC,OAAO,CAAC;MAC9B,CAAC;MACD,UAAU,EAAE;QACV,MAAM,EAAE,OAAO;QACf,aAAa,EAAE,CAACK,GAAG,CAACL,MAAM,CAAC,KAAK,CAAC,CAAC,EAAEK,GAAG,CAACL,MAAM,CAAC,KAAK,CAAC,CAAC;MACxD;IACF,CAAC;IACD;IACA,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAACI,OAAO,CAACI,KAAK,IAAI;MACxC,MAAMC,OAAO,GAAI,GAAED,KAAM,WAAU;MACnC,IAAIE,QAAQ,GAAGJ,OAAO,CAACK,UAAU,CAACH,KAAK,CAAC;MACxCF,OAAO,CAACK,UAAU,CAACF,OAAO,CAAC,GAAGlB,iBAAiB,CAACmB,QAAQ,CAAC;IAC3D,CAAC,CAAC;IACFP,QAAQ,CAACS,IAAI,CAACN,OAAO,CAAC;EACxB,CAAC,CAAC;EACF,OAAO;IACLO,OAAO,EAAE;MACPC,IAAI,EAAE,mBAAmB;MACzBX,QAAQ,EAAEA;IACZ,CAAC;IACDT,QAAQ,EAAEE,IAAI,CAACF;EACjB,CAAC;AACH;;AAEA;AACA,OAAO,SAASqB,YAAYA,CAACC,KAAK,EAAE;EAClC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAIC,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,UAAU,GAAI,SAAQP,KAAM,OAAM;IAExDQ,KAAK,CAACJ,GAAG,CAAC,CACPK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CACnBF,IAAI,CAAC9B,WAAW,CAAC,CACjB8B,IAAI,CAACG,SAAS,IAAIV,OAAO,CAACU,SAAS,CAAC,CAAC,CACrCC,KAAK,CAACC,KAAK,IAAIX,MAAM,CAACW,KAAK,CAAC,CAAC;EAClC,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}