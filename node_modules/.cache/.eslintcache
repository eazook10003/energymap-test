[{"/Users/dongwookang/Documents/internship/aes-test/src/index.js":"1","/Users/dongwookang/Documents/internship/aes-test/src/App.js":"2","/Users/dongwookang/Documents/internship/aes-test/src/LogoOverlay.js":"3","/Users/dongwookang/Documents/internship/aes-test/src/Omnibox.js":"4","/Users/dongwookang/Documents/internship/aes-test/src/data-loader.js":"5","/Users/dongwookang/Documents/internship/aes-test/src/SettingsPane.js":"6","/Users/dongwookang/Documents/internship/aes-test/src/Theme.js":"7","/Users/dongwookang/Documents/internship/aes-test/src/common.js":"8","/Users/dongwookang/Documents/internship/aes-test/src/LocationSelector.js":"9"},{"size":168,"mtime":1686928802138,"results":"10","hashOfConfig":"11"},{"size":19396,"mtime":1690503180763,"results":"12","hashOfConfig":"11"},{"size":2080,"mtime":1686928802136,"results":"13","hashOfConfig":"11"},{"size":2103,"mtime":1686928802136,"results":"14","hashOfConfig":"11"},{"size":1722,"mtime":1688607288951,"results":"15","hashOfConfig":"11"},{"size":5092,"mtime":1686928802136,"results":"16","hashOfConfig":"11"},{"size":362,"mtime":1686928802136,"results":"17","hashOfConfig":"11"},{"size":252,"mtime":1686928802137,"results":"18","hashOfConfig":"11"},{"size":2125,"mtime":1686928802136,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ldndwo",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dongwookang/Documents/internship/aes-test/src/index.js",[],[],"/Users/dongwookang/Documents/internship/aes-test/src/App.js",["49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67"],[],"import mapboxgl from 'mapbox-gl';\nimport React, { useState, useEffect, useRef} from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport Hidden from '@material-ui/core/Hidden';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/Button';\nimport { ContactsOutlined, Home } from '@material-ui/icons';\nimport LogoOverlay from './LogoOverlay';\nimport Omnibox from './Omnibox';\nimport SettingsPane from './SettingsPane';\nimport { getAllCategories } from './common';\nimport CONFIG from './config.json';\nimport { fetchMapData } from './data-loader';\nimport { THEME } from './Theme';\nimport insightLogo from './img/insight-white.png';\nimport './App.css';\n\nconst COMPANIES_SOURCE = 'companies';\nconst MAPS = CONFIG['maps'];\nconst POINT_LAYER = 'energy-companies-point-layer';\n\n// mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API_TOKEN;\nmapboxgl.accessToken='pk.eyJ1IjoidG90b3JvLWRha2UiLCJhIjoiY2tiNzJuZmQ3MDFudDJxa2N1ZG91YzBzciJ9.5qJpYzti2W7avnuM9rCiKA'\n\n/** @return {html code for the popup } */\nfunction getPopupContent(props) {\n  const categoryInfo = ['tax1', 'tax2', 'tax3']\n    .map(k => props[k])\n    .filter(s => s).join(\", \");\n  var extraNotes = \"\";\n  if (props.hasOwnProperty(\"notes\") && props[\"notes\"] !== \"\") {\n    extraNotes = `Focus: <span>${props['notes']}</span><br />`;\n  }\n  return `\n    <div class=\"popup\" style = \"color: 626262\">\n      <h3 class=\"company-name\">\n        <a href=${props['website']} class=\"popup-link\" target=\"blank\">${props['company']}</a>\n      </h3>\n      Sector(s): <span class=\"category-info\">${categoryInfo}</span><br />\n      City: <span class=\"city-info\">${props['city']}</span><br />\n      ${extraNotes}\n    </div>`;\n}\n\nfunction clearPopups() {\n  // Check if there is already a popup on the map and if so, remove it\n  // This prevents multiple popups in the case of overlapping circles\n  var popUps = document.getElementsByClassName('mapboxgl-popup');\n  if (popUps[0]) popUps[0].remove();\n}\n\nfunction displayPopup(map, feature) {\n  // clears the open popup and creates the new one \n  const coordinates = feature.geometry.coordinates.slice();\n  clearPopups();\n  new mapboxgl.Popup({})\n    .setLngLat(coordinates)\n    .setHTML(getPopupContent(feature.properties))\n    .setMaxWidth(\"600px\")\n    .addTo(map);\n}\n//79ddf2 - color for hover\n\nfunction populateMapData(map, mapId, mapData) {\n  // adds the data to the map\n  // sets correct initial view of the map\n  \n  map.setCenter(MAPS[mapId].center);\n  map.setZoom(6);\n\n  mapData.then(data => {\n    if (!map.getSource(COMPANIES_SOURCE)) {\n    map.addSource(COMPANIES_SOURCE, {\n      type: 'geojson',\n      data: data['geojson'],\n    });\n  }\n\n\n    // Last entry is fallthrough color\n    let circleColors =\n      data['taxonomy'].map(c => [c.name, c.color]).flat().concat(['#ccc']);\n\n    map.addLayer({\n      id: POINT_LAYER,\n      type: 'circle',\n      source: COMPANIES_SOURCE,\n      interactive: true,\n      paint: {\n        // make circles larger as the user zooms\n        'circle-radius': {\n          stops: [[7, 5], [14, 12], [20, 50]]\n        },\n        'circle-opacity': 0.85,\n        // color circles by primary category\n        'circle-color': ['match', ['get', 'tax1']].concat(circleColors),\n        'circle-stroke-color': '#000',\n        'circle-stroke-width': 0.4,\n      }\n    });\n\n    map.on('mouseenter', POINT_LAYER, (e) => {\n      map.getCanvas().style.cursor = 'pointer';\n    });\n\n    map.on('mouseleave', POINT_LAYER, () => {\n      map.getCanvas().style.cursor = '';\n    });\n\n    map.on('click', POINT_LAYER, e => displayPopup(map, e.features[0]));\n\n    map.flyTo({\n      center: MAPS[mapId].flyTo,\n      zoom: MAPS[mapId].flyToZoom || 8,\n      speed: 0.5,\n    });\n  });\n}\n\nconst getUrlFragment = () => window.location.hash.replace('#', '');\n\nfunction useUrlFragment(fragment, callback) {\n  useEffect(() => {\n    window.location.hash = '#' + fragment;\n    const handleHashChange = () => {\n      callback(getUrlFragment());\n    }\n    window.addEventListener('hashchange', handleHashChange);\n    return () => {\n      window.removeEventListener('hashchange', handleHashChange);\n    }\n  });\n}\n\n/** @return {mapId} */\nfunction getInitialMapId() {\n  let initialMapId = getUrlFragment();\n  if (MAPS.hasOwnProperty(initialMapId)) {\n    return initialMapId;\n  }\n  return CONFIG['defaultMapId'];\n}\n\n// sets the styles for the material-ui components\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  mainContent: {\n    flexGrow: 1,\n    position: 'relative',\n  },\n  mapContainer: {\n    height: '100vh',\n    top: 0,\n    right: 0,\n    left: 0,\n    bottom: 0,\n    backgroundColor: '#333',\n  },\n  mapOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    padding: 0,\n    pointerEvents: 'none',\n  },\n  mapOverlayInner: {\n    display: 'block',\n    position: 'relative',\n    height: '100%',\n    width: '100%',\n    margin: 0,\n    padding: 0,\n  },\n  mainControlOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: 0,\n    margin: 0,\n    pointerEvents: 'auto',\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  mainControlOverlayShifted: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: 0,\n    margin: 0,\n    pointerEvents: 'auto',\n    display: 'flex',\n    flexDirection: 'row',\n    marginLeft: 320,\n  },\n  insightLogoContainer: {\n    padding: 8,\n    marginTop: 23,\n    marginLeft: 8,\n  },\n  titleAndSearch: {\n    padding: '4px 8px',\n  },\n  mapTitle: {\n    color: '#fff',\n    padding: '4px 0px',\n    marginBottom: 4,\n  },\n  resetViewButton: {\n    position: 'absolute',\n    bottom: 73,\n    right: 4.5,\n    minWidth: 30,\n    maxWidth: 30,\n    height: 31,\n  }\n}));\n\n/** @return {html code for the app } */\nexport default function App() {\n  const classes = useStyles();\n\n  const [thisMap, setThisMap] = useState(null);\n  const [selectedMapId, setSelectedMapId] = useState(getInitialMapId());\n  const [taxonomy, setTaxonomy] = useState([]);\n  const [companiesGeojson, setCompaniesGeojson] = useState({});\n  const [selectedCategories, setSelectedCategories] = useState(new Set([]));\n  const [mobileDrawerOpen, setMobileDrawerOpen] = useState(false);\n\n\n  function handleToggleCategory(e) {\n    // called when categories are individually changed\n    var s = new Set(selectedCategories);\n    if (s.has(e.target.name)) {\n      s.delete(e.target.name);\n    } else {\n      s.add(e.target.name);\n    }\n    setSelectedCategories(s);\n  }\n\n  function handleSelectAllCategories(txnomy) {\n    // takes argument instead of using taxonomy directly because taxonomy\n    // state update can lag behind\n    setSelectedCategories(getAllCategories(txnomy));\n  }\n\n  function handleDeselectAllCategories() {\n    setSelectedCategories(new Set());\n  }\n\n  function handleSelectCompany(e) {\n    // called when you select from the search bar\n    const selectedCompany = companiesGeojson.features[e.idx];\n    displayPopup(thisMap, selectedCompany);\n    thisMap.flyTo({\n      center: selectedCompany.geometry.coordinates,\n      zoom: 14,\n    });\n  }\n\n  function handleSelectMap(mapId) {\n    if (mapId !== selectedMapId) {\n      clearPopups();\n      \n      console.log(\"thisMap: \")\n      console.log(thisMap)\n      if (thisMap.getLayer(POINT_LAYER)){\n        thisMap.removeLayer(POINT_LAYER);\n      }\n      if (thisMap.getSource(COMPANIES_SOURCE)){\n        thisMap.removeSource(COMPANIES_SOURCE);\n      }\n      setSelectedMapId(mapId);\n      setMobileDrawerOpen(false);\n      let mapData = fetchMapData(mapId);\n      mapData.then(setUpMap);\n      populateMapData(thisMap, mapId, mapData);\n      handleSelectAllCategories(taxonomy);\n    }\n  }\n  \n\n  function handleShift() {\n    // called when you open the mobile drawer\n    if (!mobileDrawerOpen) {\n      return classes.mainControlOverlay;\n    } else {\n      return classes.mainControlOverlayShifted;\n    }\n  }\n\n  function handleReset() {\n    // called when reset button is clicked\n    thisMap.flyTo({\n      center: MAPS[selectedMapId].flyTo,\n      zoom: MAPS[selectedMapId].flyToZoom || 8,\n    });\n  }\n\n  function setUpMap(data) {\n    // changes the data in the map\n    setTaxonomy(data['taxonomy']);\n    setCompaniesGeojson(data['geojson']);\n    // initially select all categories\n    handleSelectAllCategories(data['taxonomy']);\n  }\n\n  \n   //added Jun 28\n   function getDistance(coord1, coord2) {\n    let x = coord1[0] - coord2[0]\n    let y = coord1[1] - coord2[1]\n    return Math.sqrt(x*x + y*y)\n  }\n  \n  //added Jun 28\n  function getClosestRegion(clickedCoordinates, MAPS) {\n    let closestRegionId = null;\n    let minDistance = Infinity;\n  \n    Object.keys(MAPS).forEach(mapId => {\n      const distance = getDistance(clickedCoordinates, MAPS[mapId].center);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestRegionId = mapId;\n      }\n    });\n    // console.log(\"closest id: \")\n    // console.log(closestRegionId)\n    return closestRegionId;\n  }\n  \n  function convert_name_url(mapID){\n    if (mapID == \"chicago\")\n      return \"chicago\"\n    else if (mapID == \"des-moines\")\n      return \"des-moines\"\n    else if (mapID == \"indianapolis\")\n      return \"indianpolis\"\n    else if (mapID == \"kansas-city\")\n      return \"kansas-city\"\n    else if (mapID == \"madison\")\n      return \"madison\"\n    else if (mapID == \"milwaukee\")\n      return \"milwaukee\"\n    else if (mapID == \"msp\")\n      return \"minneapolisst-paul\"\n    else if (mapID == \"pittsburgh\")\n      return \"pittsburgh\"\n    else if (mapID == \"silicon-valley\")\n      return \"silicon-valley\"\n    else if (mapID == \"st-louis\")\n      return \"st-louis\"\n    else if (mapID == \"denmark\")\n      return \"denmark\"\n    else if (mapID == \"kenya\")\n      return \"kenya\"\n    else if (mapID == \"rwanda\")\n      return \"rwanda\"\n    else if (mapID == \"netherlands\")\n      return \"the-netherlands\"\n    else if (mapID == \"philippines\")\n      return \"the-philippines\"\n  }\n  //added Jun 28\n  function initMap() {\n    // creates the map\n    let map = new mapboxgl.Map({\n      container: \"map-container\",\n      style: 'mapbox://styles/mapbox/dark-v10',\n      attributionControl: false,\n      center: MAPS[selectedMapId].center,\n      zoom: MAPS[selectedMapId].flyToZoom || 6,\n      minZoom: 2,\n    });\n    let mapData = fetchMapData(selectedMapId);\n    mapData.then(setUpMap);\n\n    map.on('load', () => {\n      map.addControl(new mapboxgl.FullscreenControl(), 'bottom-right');\n      map.addControl(new mapboxgl.NavigationControl(), 'bottom-right');\n      populateMapData(map, selectedMapId, mapData);\n    });\n\n    map.on('load', () => {\n      // Add an image to use as a custom marker\n      map.loadImage(\n      'https://docs.mapbox.com/mapbox-gl-js/assets/custom_marker.png',\n      (error, image) => {\n      if (error) throw error;\n      map.addImage('custom-marker', image);\n      // Add a GeoJSON source with 2 points\n      map.addSource('points', {\n        'type': 'geojson',\n        'data': {\n          'type': 'FeatureCollection',\n          'features': [\n            {\n              // feature for Mapbox DC\n              'type': 'Feature',\n              'geometry': {\n                'type': 'Point',\n                'coordinates': [-122.21, 37.65]\n              },\n              'properties': {\n              'title': 'Silicon Valley'\n              }\n            },\n            {\n              // feature for Mapbox SF\n              'type': 'Feature',\n              'geometry': {\n                'type': 'Point',\n                'coordinates': [-88.5, 41.1]\n              },\n              'properties': {\n              'title': 'Chicago'\n              }\n            },\n            {\n              // feature for Mapbox SF\n              'type': 'Feature',\n              'geometry': {\n                'type': 'Point',\n                'coordinates': [-93.2, 44.9]\n              },\n              'properties': {\n              'title': 'Minneapolis/St. Paul'\n              }\n            },\n            {\n              // feature for Mapbox SF\n              'type': 'Feature',\n              'geometry': {\n                'type': 'Point',\n                'coordinates': [-87.9, 43.0]\n              },\n              'properties': {\n              'title': 'Milwaukee'\n              }\n            },\n            {\n              // feature for Mapbox SF\n              'type': 'Feature',\n              'geometry': {\n                'type': 'Point',\n                'coordinates': [-86.15, 39.8]\n              },\n              'properties': {\n              'title': 'Indianapolis'\n              }\n            },\n            {\n              // feature for Mapbox SF\n              'type': 'Feature',\n              'geometry': {\n                'type': 'Point',\n                'coordinates': [-89.39, 43.07]\n              },\n              'properties': {\n              'title': 'Madison'\n              }\n            },\n            {\n              // feature for Mapbox SF\n              'type': 'Feature',\n              'geometry': {\n                'type': 'Point',\n                'coordinates': [-90.2, 38.63]\n              },\n              'properties': {\n              'title': 'St. Louis'\n              }\n            },\n            {\n              // feature for Mapbox SF\n              'type': 'Feature',\n              'geometry': {\n                'type': 'Point',\n                'coordinates': [-93.6, 41.6]\n              },\n              'properties': {\n              'title': 'Des Moines'\n              }\n            },\n            {\n              // feature for Mapbox SF\n              'type': 'Feature',\n              'geometry': {\n                'type': 'Point',\n                'coordinates': [-94.6, 39.1]\n              },\n              'properties': {\n              'title': 'Kansas City'\n              }\n            },\n            {\n              // feature for Mapbox SF\n              'type': 'Feature',\n              'geometry': {\n                'type': 'Point',\n                'coordinates': [-80.0, 40.4]\n              },\n              'properties': {\n              'title': 'Pittsburgh'\n              }\n            },\n            {\n              // feature for Mapbox SF\n              'type': 'Feature',\n              'geometry': {\n                'type': 'Point',\n                'coordinates': [121, 14.58]\n              },\n              'properties': {\n              'title': 'Philippines'\n              }\n            },\n            {\n              // feature for Mapbox SF\n              'type': 'Feature',\n              'geometry': {\n                'type': 'Point',\n                'coordinates': [10.5, 56.3]\n              },\n              'properties': {\n              'title': 'Denmark'\n              }\n            },\n            {\n              // feature for Mapbox SF\n              'type': 'Feature',\n              'geometry': {\n                'type': 'Point',\n                'coordinates': [36, 0]\n              },\n              'properties': {\n              'title': 'Kenya'\n              }\n            }\n\n          ]\n        }\n      });\n       \n      // Add a symbol layer\n      map.addLayer(\n      {\n        'id': 'points',\n        'type': 'symbol',\n        'source': 'points',\n        'layout': \n        {\n          'icon-image': 'custom-marker',\n          // get the title name from the source's \"title\" property\n          'text-field': ['get', 'title'],\n          'text-font': [\n          'Open Sans Semibold',\n          'Arial Unicode MS Bold'\n          ],\n          'text-offset': [0, 1.25],\n          'text-anchor': 'top',\n          'icon-size': 0.7, // Adjust the size of the icon\n          'icon-allow-overlap': true, // Allow icons to overlap\n          'icon-ignore-placement': true \n        },\n        'paint': {\n          'text-color': '#ffffff' // Color set to white\n      }\n      });\n      }\n      );\n      });\n    //added June 28\n\n    setThisMap(map);\n    //map.on('click', mapClickHandlerRef.current);\n  }\n  const mapClickHandlerRef = useRef(null);\n\n  useEffect(() => {\n    if (!thisMap) {\n      initMap();\n    }\n  \n    if (thisMap) {\n      function handleMapClick(e) {\n        // Get clicked point's coordinates\n        const clickedCoordinates = [e.lngLat.lng, e.lngLat.lat];\n  \n        // You need a function 'getClosestRegion' that would return the ID of the closest region to the clicked point\n        const closestRegionId = getClosestRegion(clickedCoordinates, MAPS);\n        let name = convert_name_url(closestRegionId)\n        window.open(`http://www.energysociety.org/ecosystem-${name}`, '_blank');\n        // Call 'handleSelectMap' with the obtained region ID\n        handleSelectMap(closestRegionId);\n      }\n      // Remove previous click event listener\n      if (mapClickHandlerRef.current) {\n        thisMap.off('click', mapClickHandlerRef.current);\n      }\n      // Attach click event\n      thisMap.on('click', handleMapClick);\n      // Update the ref after defining the function\n      mapClickHandlerRef.current = handleMapClick;\n      if (thisMap.getLayer(POINT_LAYER)) {\n        var filters = [\"any\"];\n        // If ANY of the 3 taxonomies for a company are selected, it should be\n        // displayed on the map.\n        [1, 2, 3].forEach(i => {\n          var filter = [\"in\", `tax${i}sanitized`];\n          selectedCategories.forEach(category => filter.push(category));\n          filters.push(filter);\n        });\n        thisMap.setFilter(POINT_LAYER, filters);\n      }\n    }\n  }, [thisMap, selectedCategories]); // The dependencies array\n  \n\n\n  useUrlFragment(selectedMapId, urlFragment => {\n    if (MAPS.hasOwnProperty(urlFragment)) {\n      handleSelectMap(urlFragment);\n    }\n  });\n\nreturn (\n  <ThemeProvider theme={THEME}>\n    <div className={classes.root}>\n      <SettingsPane\n        selectedMapId={selectedMapId}\n        mobileDrawerOpen={mobileDrawerOpen}\n        selectedCategories={selectedCategories}\n        onToggleOpen={setMobileDrawerOpen}\n        onSelectMap={handleSelectMap}\n        taxonomy={taxonomy}\n        onSelectAllCategories={() => handleSelectAllCategories(taxonomy)}\n        onDeselectAllCategories={handleDeselectAllCategories}\n        onToggleCategory={handleToggleCategory} />\n      <main className={classes.mainContent}>\n        <div id=\"map-container\" className={classes.mapContainer} />\n          <LogoOverlay selectedMapId={selectedMapId} />\n          <div className={classes.resetViewButton} >\n            <IconButton variant=\"contained\" color=\"white\" className={classes.resetViewButton} aria-label=\"reset view\" onClick={() => { handleReset() }} >\n              <Home />\n            </IconButton>\n          </div>\n        <div className={classes.mapOverlay}>\n          <div className={classes.mapOverlayInner}>\n            <div className={handleShift()}>\n              <div className={classes.titleAndSearch}>\n                <div className={classes.mapTitle}>\n                  <Typography variant=\"h1\">{MAPS[selectedMapId].title}</Typography>\n                </div>\n                <Omnibox\n                  companies={companiesGeojson.features}\n                  onSelectCompany={handleSelectCompany}\n                  onOpenMobileDrawer={() => setMobileDrawerOpen(true)} />\n              </div>\n              \n            </div>\n            <LogoOverlay selectedMapId={selectedMapId} />\n          </div>\n        </div>\n      </main>\n    </div>\n  </ThemeProvider>\n); }\n","/Users/dongwookang/Documents/internship/aes-test/src/LogoOverlay.js",[],[],"/Users/dongwookang/Documents/internship/aes-test/src/Omnibox.js",[],[],"/Users/dongwookang/Documents/internship/aes-test/src/data-loader.js",[],[],[],"/Users/dongwookang/Documents/internship/aes-test/src/SettingsPane.js",[],[],"/Users/dongwookang/Documents/internship/aes-test/src/Theme.js",[],[],"/Users/dongwookang/Documents/internship/aes-test/src/common.js",[],[],"/Users/dongwookang/Documents/internship/aes-test/src/LocationSelector.js",[],[],{"ruleId":"68","severity":1,"message":"69","line":4,"column":8,"nodeType":"70","messageId":"71","endLine":4,"endColumn":14},{"ruleId":"68","severity":1,"message":"72","line":8,"column":10,"nodeType":"70","messageId":"71","endLine":8,"endColumn":26},{"ruleId":"68","severity":1,"message":"73","line":16,"column":8,"nodeType":"70","messageId":"71","endLine":16,"endColumn":19},{"ruleId":"74","severity":1,"message":"75","line":340,"column":15,"nodeType":"76","messageId":"77","endLine":340,"endColumn":17},{"ruleId":"74","severity":1,"message":"75","line":342,"column":20,"nodeType":"76","messageId":"77","endLine":342,"endColumn":22},{"ruleId":"74","severity":1,"message":"75","line":344,"column":20,"nodeType":"76","messageId":"77","endLine":344,"endColumn":22},{"ruleId":"74","severity":1,"message":"75","line":346,"column":20,"nodeType":"76","messageId":"77","endLine":346,"endColumn":22},{"ruleId":"74","severity":1,"message":"75","line":348,"column":20,"nodeType":"76","messageId":"77","endLine":348,"endColumn":22},{"ruleId":"74","severity":1,"message":"75","line":350,"column":20,"nodeType":"76","messageId":"77","endLine":350,"endColumn":22},{"ruleId":"74","severity":1,"message":"75","line":352,"column":20,"nodeType":"76","messageId":"77","endLine":352,"endColumn":22},{"ruleId":"74","severity":1,"message":"75","line":354,"column":20,"nodeType":"76","messageId":"77","endLine":354,"endColumn":22},{"ruleId":"74","severity":1,"message":"75","line":356,"column":20,"nodeType":"76","messageId":"77","endLine":356,"endColumn":22},{"ruleId":"74","severity":1,"message":"75","line":358,"column":20,"nodeType":"76","messageId":"77","endLine":358,"endColumn":22},{"ruleId":"74","severity":1,"message":"75","line":360,"column":20,"nodeType":"76","messageId":"77","endLine":360,"endColumn":22},{"ruleId":"74","severity":1,"message":"75","line":362,"column":20,"nodeType":"76","messageId":"77","endLine":362,"endColumn":22},{"ruleId":"74","severity":1,"message":"75","line":364,"column":20,"nodeType":"76","messageId":"77","endLine":364,"endColumn":22},{"ruleId":"74","severity":1,"message":"75","line":366,"column":20,"nodeType":"76","messageId":"77","endLine":366,"endColumn":22},{"ruleId":"74","severity":1,"message":"75","line":368,"column":20,"nodeType":"76","messageId":"77","endLine":368,"endColumn":22},{"ruleId":"78","severity":1,"message":"79","line":624,"column":6,"nodeType":"80","endLine":624,"endColumn":35,"suggestions":"81"},"no-unused-vars","'Hidden' is defined but never used.","Identifier","unusedVar","'ContactsOutlined' is defined but never used.","'insightLogo' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getClosestRegion', 'handleSelectMap', and 'initMap'. Either include them or remove the dependency array.","ArrayExpression",["82"],{"desc":"83","fix":"84"},"Update the dependencies array to be: [thisMap, selectedCategories, initMap, getClosestRegion, handleSelectMap]",{"range":"85","text":"86"},[17468,17497],"[thisMap, selectedCategories, initMap, getClosestRegion, handleSelectMap]"]